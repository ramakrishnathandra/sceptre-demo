AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create any number of Hackathon ecs nodes
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-0d09143c6fc181fe3
    us-east-2:
      AMIID: ami-446f3521
Parameters:
  DesiredCapacity:
    Default: 1
    Description: Number of instances to launch in your ECS cluster
    Type: Number
  InstanceType:
    AllowedValues:
      - t2.medium
      - t2.micro
      - t2.xlarge
      - t2.2xlarge
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - g2.2xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    Default: t2.micro
    Description: EC2 instance type
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
    Type: AWS::EC2::KeyPair::KeyName
  MaxSize:
    Default: 1
    Description: Maximum number of instances that can be launched in your ECS cluster
    Type: Number
  SubnetId:
    Description: Select at two subnets in your selected VPC
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: Select a VPC that allows instances access to the Internet.
    Type: AWS::EC2::VPC::Id
Resources:
  ALBListener:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'ECSTG'
          Type: forward
      LoadBalancerArn: !Ref 'ApplicationElasticLB'
      Port: '80'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ApplicationElasticLB:
    Properties:
      Name: ApplicationElasticLB
      Scheme: internet-facing
      Subnets: !Ref 'SubnetId'
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  AutoscalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: ecs-service
    Type: AWS::IAM::Role
  ClusterSecurityGroup:
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'
    Type: AWS::EC2::SecurityGroup
  ContainerInstances:
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMIID
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      SecurityGroups:
        - Properties:
            GroupDescription: ECS Security Group
            VpcId: !Ref 'VpcId'
          Type: AWS::EC2::SecurityGroup
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config\nyum install\
              \ -y aws-cfn-bootstrap\n"
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource ECSAutoScalingGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - "\n"
    Type: AWS::AutoScaling::LaunchConfiguration
  EC2InstanceProfile:
    Properties:
      Roles:
        - !Ref 'EC2Role'
    Type: AWS::IAM::InstanceProfile
  EC2Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: ecs-service
    Type: AWS::IAM::Role
  ECSALBListenerRule:
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'ECSTG'
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref 'ALBListener'
      Priority: '1'
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  ECSCluster:
    Type: AWS::ECS::Cluster
  ECSServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: ecs-service
    Type: AWS::IAM::Role
  ECSTG:
    Properties:
      HealthCheckIntervalSeconds: '10'
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '5'
      HealthyThresholdCount: '2'
      Name: ECSTG
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: '2'
      VpcId: !Ref 'VpcId'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  EcsSecurityGroupALBports:
    Properties:
      FromPort: 31000
      GroupId: !Ref 'ClusterSecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'ClusterSecurityGroup'
      ToPort: 61000
    Type: AWS::EC2::SecurityGroupIngress
  EcsSecurityGroupHTTPinbound:
    Properties:
      CidrIp: '0.0.0.0/0'
      FromPort: 80
      GroupId: !Ref 'ClusterSecurityGroup'
      IpProtocol: tcp
      ToPort: 80
    Type: AWS::EC2::SecurityGroupIngress
  EcsSecurityGroupSSHinbound:
    Properties:
      CidrIp: '0.0.0.0/0'
      FromPort: 22
      GroupId: !Ref 'ClusterSecurityGroup'
      IpProtocol: tcp
      ToPort: 22
    Type: AWS::EC2::SecurityGroupIngress
  service:
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: hackathon-app
          ContainerPort: 80
          TargetGroupArn: !Ref 'ECSTG'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'taskdefinition'
    Type: AWS::ECS::Service
  taskdefinition:
    Properties:
      ContainerDefinitions:
        - Cpu: 10
          Essential: 'true'
          Image: ramareddymca/docker-test:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ecs-demo-app'
          Memory: '300'
          Name: hackathon-app
          PortMappings:
            - ContainerPort: 80
      Family: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - -ecs-demo-app
    Type: AWS::ECS::TaskDefinition
